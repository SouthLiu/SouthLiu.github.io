{"version":3,"sources":["components/Input/index.tsx","components/List/index.tsx","App.tsx","index.tsx"],"names":["Inputs","props","addTodo","inputRef","useRef","useState","inputVal","setInputVal","style","marginBottom","ref","width","onClick","value","current","state","console","log","id","Date","getTime","contant","completed","setValue","memo","Index","todoList","delTodo","length","map","item","index","display","alignItems","justifyContent","title","cancelText","okText","onConfirm","CloseCircleOutlined","cursor","marginLeft","App","setTodoList","useCallback","data","newTodo","Object","assign","forEach","splice","Input","List","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAQA,SAASA,EAAOC,GAAgB,IACtBC,EAAYD,EAAZC,QACFC,EAAWC,iBAAY,MAFA,EAGGC,mBAAiB,IAHpB,mBAGtBC,EAHsB,KAGZC,EAHY,KAqB7B,OACE,sBAAKC,MAAO,CAAEC,aAAc,IAA5B,UACE,cAAC,IAAD,CAAOC,IAAKP,EAAUK,MAAO,CAAEG,MAAO,OACtC,cAAC,IAAD,CAAQC,QAnBI,WAAa,IACnBC,EAAUV,EAASW,QAAQC,MAA3BF,MACRN,GAAY,kBAAMM,KAEdP,IAAaO,GACfG,QAAQC,IAAI,sBAGdf,EAAQ,CACNgB,IAAI,IAAIC,MAAOC,UACfC,QAASR,EACTS,WAAW,IAEbnB,EAASW,QAAQS,SAAS,KAMxB,6BAKSC,qBAAKxB,G,gBC3BpB,SAASyB,EAAMxB,GAA8B,IACnCyB,EAAsBzB,EAAtByB,SAAUC,EAAY1B,EAAZ0B,QAMlB,OACE,qBAAKnB,MAAO,CAAEG,MAAO,KAArB,SAEIe,EAASE,OAAS,GAAKF,EAASG,KAAI,SAACC,EAAMC,GACzC,OACE,sBAAmBvB,MAAO,CAAEwB,QAAS,OAAQC,WAAY,SAASC,eAAgB,iBAAlF,UACE,+BAAQJ,EAAKT,UAEb,cAAC,IAAD,CAAYc,MAAM,4BAAQC,WAAW,eAAKC,OAAO,eAAKC,UAAW,kBAZvDpB,EAY0EY,EAAKZ,QAXnGS,EAAQT,GADW,IAACA,GAYV,SACE,cAACqB,EAAA,EAAD,CAAqB/B,MAAO,CAAEgC,OAAQ,UAAWC,WAAY,UAJvDX,EAAKZ,SAcZM,qBAAKC,G,MCJLiB,MA1Bf,WAAgB,IAAD,EACmBrC,mBAAkB,IADrC,mBACNqB,EADM,KACIiB,EADJ,KAEPzC,EAAU0C,uBACd,SAACC,GACCF,GAAY,SAAAjB,GAAQ,4BAAQA,GAAR,CAAkBmB,SACrC,IAGClB,EAAUiB,uBAAY,SAAC1B,GAC3B,IAAM4B,EAAmBC,OAAOC,OAAO,GAAItB,GAC3CA,GAAYA,EAASuB,SAAQ,SAACnB,EAAMC,GAC9BD,EAAKZ,KAAOA,GACd4B,EAAQI,OAAOnB,EAAO,MAG1BY,EAAYG,KACX,CAACpB,IAEJ,OACE,qCACE,cAACyB,EAAD,CAAOjD,QAASA,IAChB,cAACkD,EAAD,CAAM1B,SAAUA,EAAUC,QAASA,QCvBzC0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.11b3f50b.chunk.js","sourcesContent":["import React, { memo, useRef, useState } from 'react'\r\nimport { Button, Input } from 'antd'\r\nimport { ITodo } from '../typings'\r\n\r\ninterface IProps {\r\n  addTodo: (data: ITodo) => void;\r\n}\r\n\r\nfunction Inputs(props: IProps) {\r\n  const { addTodo } = props\r\n  const inputRef = useRef<any>(null)\r\n  const [inputVal, setInputVal] = useState<string>('')\r\n\r\n  const addItem = (): void => {\r\n    const { value } = inputRef.current.state\r\n    setInputVal(() => value)\r\n\r\n    if (inputVal === value) {\r\n      console.log('重复值')\r\n    }\r\n\r\n    addTodo({\r\n      id: new Date().getTime(),\r\n      contant: value,\r\n      completed: false\r\n    })\r\n    inputRef.current.setValue('')\r\n  }\r\n\r\n  return (\r\n    <div style={{ marginBottom: 20 }}>\r\n      <Input ref={inputRef} style={{ width: 300 }} />\r\n      <Button onClick={addItem}>添加</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(Inputs)\r\n","import React, { memo, ReactElement } from 'react'\r\nimport { ITodo } from '../typings'\r\nimport { CloseCircleOutlined } from '@ant-design/icons';\r\nimport { Popconfirm } from 'antd';\r\n\r\ninterface IProps {\r\n  todoList: ITodo[];\r\n  delTodo: (id: number) => void;\r\n}\r\n\r\nfunction Index(props: IProps): ReactElement {\r\n  const { todoList, delTodo } = props\r\n\r\n  const handleDelete = (id: number): void => {\r\n    delTodo(id)\r\n  }\r\n\r\n  return (\r\n    <div style={{ width: 350 }}>\r\n      {\r\n        todoList.length > 0 && todoList.map((item, index) => {\r\n          return (\r\n            <div key={item.id} style={{ display: 'flex', alignItems: 'center',justifyContent: 'space-between' }}>\r\n              <span>{ item.contant }</span>\r\n\r\n              <Popconfirm title=\"确定删除?\" cancelText=\"取消\" okText=\"确定\" onConfirm={() => handleDelete(item.id)}>\r\n                <CloseCircleOutlined style={{ cursor: 'pointer', marginLeft: 15 }} />\r\n              </Popconfirm>\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(Index)\r\n","import React, { useState, useCallback } from 'react';\r\nimport Input from './components/Input';\r\nimport List from './components/List'\r\nimport { ITodo } from './components/typings';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [todoList, setTodoList] = useState<ITodo[]>([])\r\n  const addTodo = useCallback(\r\n    (data: ITodo): void => {\r\n      setTodoList(todoList => [...todoList, data])\r\n    }, []\r\n  )\r\n\r\n  const delTodo = useCallback((id: number): void => {\r\n    const newTodo: ITodo[] = Object.assign([], todoList)\r\n    todoList && todoList.forEach((item, index) => {\r\n      if (item.id === id) {\r\n        newTodo.splice(index, 1)\r\n      }\r\n    })\r\n    setTodoList(newTodo)\r\n  }, [todoList])\r\n\r\n  return (\r\n    <>\r\n      <Input addTodo={addTodo} />\r\n      <List todoList={todoList} delTodo={delTodo} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}